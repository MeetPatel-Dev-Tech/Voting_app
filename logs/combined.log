[2025-04-10 14:43:36] INFO: Server running on port 3000
[2025-04-10 14:50:32] INFO: Server running on port 3000
[2025-04-10 14:52:21] INFO: Server running on port 3000
[2025-04-10 14:53:13] INFO: Server running on port 3000
[2025-04-10 14:54:07] INFO: Server running on port 3000
[2025-04-10 15:01:19] INFO: Server running on port 3000
[2025-04-10 15:03:53] INFO: Server running on port 3000
[2025-04-10 15:03:56] INFO: Server running on port 3000
[2025-04-10 15:04:17] INFO: Server running on port 3000
[2025-04-10 15:11:18] INFO: Server running on port 3000
[2025-04-10 15:11:27] INFO: Server running on port 3000
[2025-04-10 15:13:40] INFO: Server running on port 3000
[2025-04-10 15:16:49] INFO: Server running on port 3000
[2025-04-10 15:17:49] INFO: Server running on port 3000
[2025-04-10 15:17:49] INFO: connected to mongoDB server ::
[2025-04-10 15:19:30] INFO: Server running on port 3000
[2025-04-10 15:19:30] INFO: connected to mongoDB server ::
[2025-04-10 15:20:53] INFO: Server running on port 3000
[2025-04-10 15:20:53] INFO: connected to mongoDB server ::
[2025-04-10 15:21:33] INFO: Server running on port 3000
[2025-04-10 15:21:33] INFO: connected to mongoDB server ::
[2025-04-10 15:21:44] INFO: Server running on port 3000
[2025-04-10 15:21:44] INFO: connected to mongoDB server ::
[2025-04-10 15:24:27] INFO: Server running on port 3000
[2025-04-10 15:24:27] INFO: connected to mongoDB server ::
[2025-04-10 15:37:49] INFO: Server running on port 3000
[2025-04-10 15:37:49] INFO: connected to mongoDB server ::
[2025-04-10 15:39:01] INFO: Server running on port 3000
[2025-04-10 15:39:01] INFO: connected to mongoDB server ::
[2025-04-10 15:39:10] INFO: Server running on port 3000
[2025-04-10 15:39:10] INFO: connected to mongoDB server ::
[2025-04-10 15:43:16] INFO: Server running on port 3000
[2025-04-10 15:43:16] INFO: connected to mongoDB server ::
[2025-04-10 15:48:14] INFO: Server running on port 3000
[2025-04-10 15:48:14] INFO: connected to mongoDB server ::
[2025-04-10 15:50:22] INFO: Server running on port 3000
[2025-04-10 15:50:22] INFO: connected to mongoDB server ::
[2025-04-10 15:51:05] INFO: Server running on port 3000
[2025-04-10 15:51:05] INFO: connected to mongoDB server ::
[2025-04-10 15:51:20] INFO: Server running on port 3000
[2025-04-10 15:51:20] INFO: connected to mongoDB server ::
[2025-04-10 15:51:34] INFO: Server running on port 3000
[2025-04-10 15:51:34] INFO: connected to mongoDB server ::
[2025-04-10 15:52:07] INFO: Server running on port 3000
[2025-04-10 15:52:07] INFO: connected to mongoDB server ::
[2025-04-10 15:52:30] INFO: Server running on port 3000
[2025-04-10 15:52:30] INFO: connected to mongoDB server ::
[2025-04-10 15:52:52] INFO: Server running on port 3000
[2025-04-10 15:52:52] INFO: connected to mongoDB server ::
[2025-04-10 15:53:36] INFO: Server running on port 3000
[2025-04-10 15:53:36] INFO: connected to mongoDB server ::
[2025-04-10 15:53:46] INFO: Server running on port 3000
[2025-04-10 15:53:46] INFO: connected to mongoDB server ::
[2025-04-10 15:56:54] INFO: Server running on port 3000
[2025-04-10 15:56:54] INFO: connected to mongoDB server ::
[2025-04-10 15:57:35] INFO: Server running on port 3000
[2025-04-10 15:57:35] INFO: connected to mongoDB server ::
[2025-04-10 15:58:40] INFO: Server running on port 3000
[2025-04-10 15:58:40] INFO: connected to mongoDB server ::
[2025-04-10 15:58:45] INFO: Server running on port 3000
[2025-04-10 15:58:45] INFO: connected to mongoDB server ::
[2025-04-10 16:11:03] INFO: Server running on port 3000
[2025-04-10 16:11:03] INFO: connected to mongoDB server ::
[2025-04-10 16:11:12] INFO: 
Received SIGINT. Closing server and DB connection...
[2025-04-10 16:13:02] INFO: Server running on port 3000
[2025-04-10 16:13:02] INFO: connected to mongoDB server ::
[2025-04-10 16:13:04] INFO: 
Received SIGINT. Closing server and DB connection...
[2025-04-10 16:14:41] INFO: Server running on port 3000
[2025-04-10 16:14:41] INFO: connected to mongoDB server ::
[2025-04-10 16:14:42] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-10 16:15:21] INFO: Server running on port 3000
[2025-04-10 16:15:21] INFO: connected to mongoDB server ::
[2025-04-10 16:15:22] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-10 16:15:22] INFO: ðŸ›‘ HTTP server closed
[2025-04-10 16:34:41] INFO: Server running on port 3000
[2025-04-10 16:34:41] INFO: connected to mongoDB server ::
[2025-04-10 16:34:46] INFO: Server running on port 3000
[2025-04-10 16:34:46] INFO: connected to mongoDB server ::
[2025-04-10 16:34:50] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-10 16:58:59] INFO: Server running on port 3000
[2025-04-10 16:58:59] INFO: connected to mongoDB server ::
[2025-04-10 16:59:24] INFO: Server running on port 3000
[2025-04-10 16:59:24] INFO: connected to mongoDB server ::
[2025-04-10 17:01:13] INFO: Hashing password...
[2025-04-10 17:01:52] INFO: Hashing password...
[2025-04-10 17:02:04] INFO: Hashing password...
[2025-04-10 17:04:20] WARN: Token Not Found or Invalid Format
[2025-04-10 17:08:51] ERROR: Error in updatePassword: Cast to ObjectId failed for value "{ id: '67f7ac01a5349279b91f56d0', iat: 1744284673, exp: 1744314673 }" (type Object) at path "_id" for model "User"
[2025-04-10 17:11:50] ERROR: Error in updatePassword: Cast to ObjectId failed for value "{ id: '67f7ac01a5349279b91f56d0', iat: 1744284673, exp: 1744314673 }" (type Object) at path "_id" for model "User"
[2025-04-10 17:15:02] INFO: Server running on port 3000
[2025-04-10 17:15:02] INFO: connected to mongoDB server ::
[2025-04-10 17:15:11] INFO: Hashing password...
[2025-04-10 17:17:29] INFO: Hashing password...
[2025-04-10 17:17:45] INFO: Hashing password...
[2025-04-10 17:18:33] WARN: Token Not Found or Invalid Format
[2025-04-10 17:19:26] INFO: Server running on port 3000
[2025-04-10 17:19:26] INFO: connected to mongoDB server ::
[2025-04-10 17:22:43] INFO: Server running on port 3000
[2025-04-10 17:22:43] INFO: connected to mongoDB server ::
[2025-04-10 17:27:08] INFO: Server running on port 3000
[2025-04-10 17:27:08] INFO: connected to mongoDB server ::
[2025-04-10 17:27:48] INFO: Server running on port 3000
[2025-04-10 17:27:48] INFO: connected to mongoDB server ::
[2025-04-10 17:29:44] ERROR: Error JWT Verification: jwt expired
[2025-04-10 17:42:57] ERROR: Error JWT Verification: jwt expired
[2025-04-10 17:46:15] WARN: Token Not Found or Invalid Format
[2025-04-10 17:47:50] WARN: Token Not Found or Invalid Format
[2025-04-10 18:28:31] INFO: Server running on port 3000
[2025-04-10 18:28:31] INFO: connected to mongoDB server ::
[2025-04-10 18:30:58] INFO: Server running on port 3000
[2025-04-10 18:30:58] INFO: connected to mongoDB server ::
[2025-04-10 18:31:12] INFO: Server running on port 3000
[2025-04-10 18:31:12] INFO: connected to mongoDB server ::
[2025-04-10 18:31:24] INFO: Server running on port 3000
[2025-04-10 18:31:24] INFO: connected to mongoDB server ::
[2025-04-10 18:49:15] INFO: Server running on port 3000
[2025-04-10 18:49:15] INFO: connected to mongoDB server ::
[2025-04-11 10:56:20] INFO: Server running on port 3000
[2025-04-11 10:56:20] INFO: connected to mongoDB server ::
[2025-04-11 10:56:26] INFO: Server running on port 3000
[2025-04-11 10:56:26] INFO: connected to mongoDB server ::
[2025-04-11 10:56:33] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-11 11:10:44] INFO: Server running on port 3000
[2025-04-11 11:10:44] INFO: connected to mongoDB server ::
[2025-04-11 11:12:49] INFO: Server running on port 3000
[2025-04-11 11:12:49] INFO: connected to mongoDB server ::
[2025-04-11 11:12:53] INFO: Server running on port 3000
[2025-04-11 11:12:53] INFO: connected to mongoDB server ::
[2025-04-11 11:12:59] INFO: Hashing password...
[2025-04-11 11:13:04] INFO: Hashing password...
[2025-04-11 11:13:04] ERROR: Error in signup: E11000 duplicate key error collection: voting.users index: aadharCardNumber_1 dup key: { aadharCardNumber: "305053670814" }
[2025-04-11 11:15:17] INFO: Server running on port 3000
[2025-04-11 11:15:17] INFO: connected to mongoDB server ::
[2025-04-11 11:15:50] INFO: Server running on port 3000
[2025-04-11 11:15:50] INFO: connected to mongoDB server ::
[2025-04-11 11:16:43] INFO: Hashing password...
[2025-04-11 11:17:17] INFO: Hashing password...
[2025-04-11 11:17:28] INFO: Hashing password...
[2025-04-11 11:17:42] INFO: Password not modified, skipping hashing
[2025-04-11 11:18:21] INFO: Hashing password...
[2025-04-11 11:19:00] INFO: Hashing password...
[2025-04-11 11:20:02] ERROR: Error JWT Verification: jwt expired
[2025-04-11 11:39:28] INFO: Server running on port 3000
[2025-04-11 11:39:28] INFO: connected to mongoDB server ::
[2025-04-11 11:39:32] INFO: Server running on port 3000
[2025-04-11 11:39:32] INFO: connected to mongoDB server ::
[2025-04-11 11:39:59] INFO: Server running on port 3000
[2025-04-11 11:39:59] INFO: connected to mongoDB server ::
[2025-04-11 11:40:13] INFO: Server running on port 3000
[2025-04-11 11:40:13] INFO: connected to mongoDB server ::
[2025-04-11 11:40:28] INFO: Server running on port 3000
[2025-04-11 11:40:28] INFO: connected to mongoDB server ::
[2025-04-11 11:40:41] INFO: Server running on port 3000
[2025-04-11 11:40:41] INFO: connected to mongoDB server ::
[2025-04-11 11:41:00] INFO: Server running on port 3000
[2025-04-11 11:41:00] INFO: connected to mongoDB server ::
[2025-04-11 11:46:07] ERROR: Error JWT Verification: jwt expired
[2025-04-11 11:48:07] ERROR: Error JWT Verification: jwt expired
[2025-04-11 11:50:35] INFO: Server running on port 3000
[2025-04-11 11:50:35] INFO: connected to mongoDB server ::
[2025-04-11 14:31:25] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-11 14:32:50] INFO: Server running on port 3000
[2025-04-11 14:32:50] INFO: connected to mongoDB server ::
[2025-04-11 14:33:06] INFO: Server running on port 3000
[2025-04-11 14:33:06] INFO: connected to mongoDB server ::
[2025-04-11 14:33:57] INFO: Server running on port 3000
[2025-04-11 14:33:57] INFO: connected to mongoDB server ::
[2025-04-11 14:37:50] INFO: Server running on port 3000
[2025-04-11 14:37:50] INFO: connected to mongoDB server ::
[2025-04-11 14:38:06] INFO: Server running on port 3000
[2025-04-11 14:38:06] INFO: connected to mongoDB server ::
[2025-04-11 14:39:48] INFO: Server running on port 3000
[2025-04-11 14:39:48] INFO: connected to mongoDB server ::
[2025-04-11 14:41:00] INFO: 
ðŸš¦ Received SIGINT. Closing server and DB connection...
[2025-04-11 14:42:41] INFO: Server running on port 3000
[2025-04-11 14:42:41] INFO: connected to mongoDB server ::
[2025-04-11 14:43:02] INFO: Server running on port 3000
[2025-04-11 14:43:02] INFO: connected to mongoDB server ::
[2025-04-11 14:44:10] INFO: Server running on port 3000
[2025-04-11 14:44:10] INFO: connected to mongoDB server ::
[2025-04-11 14:50:01] INFO: Server running on port 3000
[2025-04-11 14:50:01] INFO: connected to mongoDB server ::
[2025-04-11 14:50:05] INFO: Server running on port 3000
[2025-04-11 14:50:05] INFO: connected to mongoDB server ::
[2025-04-11 14:50:17] INFO: Server running on port 3000
[2025-04-11 14:50:17] INFO: connected to mongoDB server ::
[2025-04-11 14:50:22] INFO: Server running on port 3000
[2025-04-11 14:50:22] INFO: connected to mongoDB server ::
[2025-04-11 14:52:17] INFO: Server running on port 3000
[2025-04-11 14:52:17] INFO: connected to mongoDB server ::
[2025-04-11 14:52:25] INFO: Server running on port 3000
[2025-04-11 14:52:25] INFO: connected to mongoDB server ::
[2025-04-11 14:56:44] INFO: Server running on port 3000
[2025-04-11 14:56:44] INFO: connected to mongoDB server ::
[2025-04-11 15:17:33] INFO: Server running on port 3000
[2025-04-11 15:17:33] INFO: connected to mongoDB server ::
[2025-04-11 15:40:36] INFO: Server running on port 3000
[2025-04-11 15:40:36] INFO: connected to mongoDB server ::
[2025-04-11 15:47:41] INFO: Hashing password...
[2025-04-11 15:47:41] ERROR: Error in signup: E11000 duplicate key error collection: voting.users index: aadharCardNumber_1 dup key: { aadharCardNumber: "305053670817" }
[2025-04-11 15:47:54] INFO: Hashing password...
[2025-04-11 16:51:52] INFO: Server running on port 3000
[2025-04-11 16:51:52] INFO: connected to mongoDB server ::
[2025-04-11 16:53:22] INFO: Server running on port 3000
[2025-04-11 16:53:22] INFO: connected to mongoDB server ::
[2025-04-11 16:58:24] INFO: Server running on port 3000
[2025-04-11 16:58:24] INFO: connected to mongoDB server ::
[2025-04-11 16:58:40] INFO: Server running on port 3000
[2025-04-11 16:58:40] INFO: connected to mongoDB server ::
[2025-04-11 17:05:44] INFO: Server running on port 3000
[2025-04-11 17:05:44] INFO: connected to mongoDB server ::
[2025-04-11 17:05:48] INFO: Server running on port 3000
[2025-04-11 17:05:48] INFO: connected to mongoDB server ::
[2025-04-11 17:08:12] INFO: Server running on port 3000
[2025-04-11 17:08:13] INFO: connected to mongoDB server ::
[2025-04-11 17:11:19] INFO: Server running on port 3000
[2025-04-11 17:11:19] INFO: connected to mongoDB server ::
[2025-04-11 17:17:09] INFO: Server running on port 3000
[2025-04-11 17:17:09] INFO: connected to mongoDB server ::
[2025-04-11 17:17:43] INFO: Server running on port 3000
[2025-04-11 17:17:43] INFO: connected to mongoDB server ::
[2025-04-11 17:17:57] INFO: Server running on port 3000
[2025-04-11 17:17:57] INFO: connected to mongoDB server ::
[2025-04-11 17:18:06] INFO: Hashing password...
[2025-04-11 17:18:07] ERROR: Error in signup: E11000 duplicate key error collection: voting.users index: aadharCardNumber_1 dup key: { aadharCardNumber: "305053670811" }
[2025-04-11 17:18:24] INFO: Hashing password...
[2025-04-11 17:18:54] INFO: Server running on port 3000
[2025-04-11 17:18:54] INFO: connected to mongoDB server ::
[2025-04-11 17:19:09] INFO: Hashing password...
[2025-04-11 17:19:09] ERROR: Error in signup: E11000 duplicate key error collection: voting.users index: aadharCardNumber_1 dup key: { aadharCardNumber: "305053670814" }
[2025-04-11 17:19:15] INFO: Hashing password...
[2025-04-11 17:19:15] ERROR: Error in signup: E11000 duplicate key error collection: voting.users index: aadharCardNumber_1 dup key: { aadharCardNumber: "305053670817" }
[2025-04-11 17:19:20] INFO: Hashing password...
[2025-04-11 17:19:48] INFO: Server running on port 3000
[2025-04-11 17:19:48] INFO: connected to mongoDB server ::
[2025-04-11 17:20:03] INFO: Hashing password...
[2025-04-11 17:20:54] INFO: Server running on port 3000
[2025-04-11 17:20:54] INFO: connected to mongoDB server ::
[2025-04-11 17:34:03] INFO: Server running on port 3000
[2025-04-11 17:34:03] INFO: connected to mongoDB server ::
[2025-04-11 17:37:43] INFO: Server running on port 3000
[2025-04-11 17:37:43] INFO: connected to mongoDB server ::
[2025-04-11 17:37:50] INFO: Server running on port 3000
[2025-04-11 17:37:50] INFO: connected to mongoDB server ::
[2025-04-11 17:42:57] INFO: Server running on port 3000
[2025-04-11 17:42:57] INFO: connected to mongoDB server ::
[2025-04-11 17:43:06] INFO: Server running on port 3000
[2025-04-11 17:43:06] INFO: connected to mongoDB server ::
[2025-04-11 17:43:33] ERROR: Error in admin-check: Cast to ObjectId failed for value "<ref *2> IncomingMessage {
  _events: {
    close: undefined,
    error: undefined,
    data: undefined,
    end: undefined,
    readable: undefined,
    aborted: undefined
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 60295036
  },
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 852,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 852,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Circular *1],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _peername: { address: '::1', family: 'IPv6', port: 57743 },
    [Symbol(async_id_symbol)]: 307,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Content-Type',
    'application/json',
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTU0M2UzNzg3NmYyZjg0N2EwNjcyOSIsImlhdCI6MTc0NDM1MjIzMCwiZXhwIjoxNzQ0MzgyMjMwfQ.p7fO0AHTwTvmFoquY8v0KNYGxzpLFtWov7jYdWNEi1Y',
    'User-Agent',
    'PostmanRuntime/7.43.3',
    'Accept',
    '*/*',
    'Cache-Control',
    'no-cache',
    'Postman-Token',
    '9c0c1efd-2e80-462d-aa36-796600945616',
    'Host',
    'localhost:3000',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Connection',
    'keep-alive',
    'Content-Length',
    '71'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 852,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 852,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Circular *1],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _peername: { address: '::1', family: 'IPv6', port: 57743 },
    [Symbol(async_id_symbol)]: 307,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/candidate',
  originalUrl: '/candidate',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/',
    path: '/',
    href: '/',
    _raw: '/'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(async_id_symbol)]: 307,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'access-control-allow-origin': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array],
      'ratelimit-policy': [Array],
      'ratelimit-limit': [Array],
      'ratelimit-remaining': [Array],
      'ratelimit-reset': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  rateLimit: {
    limit: 100,
    used: 2,
    remaining: 98,
    resetTime: 2025-04-11T12:28:26.168Z
  },
  body: { age: 59, party: 'AAP', name: 'Arvind Kejrival' },
  _body: true,
  length: undefined,
  _eventsCount: 0,
  route: Route {
    path: '/',
    stack: [ [Layer], [Layer], [Layer], [Layer] ],
    methods: { post: true }
  },
  user: { id: '67e543e37876f2f847a06729', iat: 1744352230, exp: 1744382230 },
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    'content-type': 'application/json',
    authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTU0M2UzNzg3NmYyZjg0N2EwNjcyOSIsImlhdCI6MTc0NDM1MjIzMCwiZXhwIjoxNzQ0MzgyMjMwfQ.p7fO0AHTwTvmFoquY8v0KNYGxzpLFtWov7jYdWNEi1Y',
    'user-agent': 'PostmanRuntime/7.43.3',
    accept: '*/*',
    'cache-control': 'no-cache',
    'postman-token': '9c0c1efd-2e80-462d-aa36-796600945616',
    host: 'localhost:3000',
    'accept-encoding': 'gzip, deflate, br',
    connection: 'keep-alive',
    'content-length': '71'
  },
  [Symbol(kHeadersCount)]: 20,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0
}" (type IncomingMessage) at path "_id" for model "User"
[2025-04-11 17:44:00] INFO: Received SIGINT. Closing server and DB connection...
[2025-04-11 17:44:05] INFO: Server running on port 3000
[2025-04-11 17:44:05] INFO: connected to mongoDB server ::
[2025-04-11 17:44:09] ERROR: Error in admin-check: Cast to ObjectId failed for value "<ref *2> IncomingMessage {
  _events: {
    close: undefined,
    error: undefined,
    data: undefined,
    end: undefined,
    readable: undefined,
    aborted: undefined
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 60295036
  },
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 846,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 846,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Circular *1],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _peername: { address: '::1', family: 'IPv6', port: 57784 },
    [Symbol(async_id_symbol)]: 271,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Content-Type',
    'application/json',
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTU0M2UzNzg3NmYyZjg0N2EwNjcyOSIsImlhdCI6MTc0NDM1MjIzMCwiZXhwIjoxNzQ0MzgyMjMwfQ.p7fO0AHTwTvmFoquY8v0KNYGxzpLFtWov7jYdWNEi1Y',
    'User-Agent',
    'PostmanRuntime/7.43.3',
    'Accept',
    '*/*',
    'Cache-Control',
    'no-cache',
    'Postman-Token',
    'e68470bb-2a28-4772-86f2-f2cf9b88b95e',
    'Host',
    'localhost:3000',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Connection',
    'keep-alive',
    'Content-Length',
    '71'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 846,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 165,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 846,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 173,
        [Symbol(triggerId)]: 166,
        [Symbol(kAsyncContextFrame)]: undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Circular *1],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _peername: { address: '::1', family: 'IPv6', port: 57784 },
    [Symbol(async_id_symbol)]: 271,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/candidate',
  originalUrl: '/candidate',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/',
    path: '/',
    href: '/',
    _raw: '/'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(async_id_symbol)]: 271,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'access-control-allow-origin': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array],
      'ratelimit-policy': [Array],
      'ratelimit-limit': [Array],
      'ratelimit-remaining': [Array],
      'ratelimit-reset': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  rateLimit: {
    limit: 100,
    used: 1,
    remaining: 99,
    resetTime: 2025-04-11T12:29:09.797Z
  },
  body: { age: 59, party: 'AAP', name: 'Arvind Kejrival' },
  _body: true,
  length: undefined,
  _eventsCount: 0,
  route: Route {
    path: '/',
    stack: [ [Layer], [Layer], [Layer], [Layer] ],
    methods: { post: true }
  },
  user: { id: '67e543e37876f2f847a06729', iat: 1744352230, exp: 1744382230 },
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    'content-type': 'application/json',
    authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTU0M2UzNzg3NmYyZjg0N2EwNjcyOSIsImlhdCI6MTc0NDM1MjIzMCwiZXhwIjoxNzQ0MzgyMjMwfQ.p7fO0AHTwTvmFoquY8v0KNYGxzpLFtWov7jYdWNEi1Y',
    'user-agent': 'PostmanRuntime/7.43.3',
    accept: '*/*',
    'cache-control': 'no-cache',
    'postman-token': 'e68470bb-2a28-4772-86f2-f2cf9b88b95e',
    host: 'localhost:3000',
    'accept-encoding': 'gzip, deflate, br',
    connection: 'keep-alive',
    'content-length': '71'
  },
  [Symbol(kHeadersCount)]: 20,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0
}" (type IncomingMessage) at path "_id" for model "User"
[2025-04-11 17:47:27] INFO: Server running on port 3000
[2025-04-11 17:47:27] INFO: connected to mongoDB server ::
[2025-04-11 17:47:35] INFO: Server running on port 3000
[2025-04-11 17:47:35] INFO: connected to mongoDB server ::
[2025-04-11 17:48:17] INFO: Server running on port 3000
[2025-04-11 17:48:17] INFO: connected to mongoDB server ::
[2025-04-11 17:49:13] ERROR: Error JWT Verification: jwt expired
[2025-04-11 17:52:33] INFO: Server running on port 3000
[2025-04-11 17:52:34] INFO: connected to mongoDB server ::
[2025-04-11 18:01:20] INFO: Server running on port 3000
[2025-04-11 18:01:20] INFO: connected to mongoDB server ::
[2025-04-11 18:01:25] ERROR: Error in signup: User is not defined
[2025-04-11 18:02:45] INFO: Server running on port 3000
[2025-04-11 18:02:45] INFO: connected to mongoDB server ::
[2025-04-11 18:04:04] INFO: Server running on port 3000
[2025-04-11 18:04:04] INFO: connected to mongoDB server ::
[2025-04-11 18:04:21] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:05:10] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:07:05] INFO: Server running on port 3000
[2025-04-11 18:07:06] INFO: connected to mongoDB server ::
[2025-04-11 18:07:10] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:07:34] INFO: Server running on port 3000
[2025-04-11 18:07:34] INFO: connected to mongoDB server ::
[2025-04-11 18:07:37] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:08:23] INFO: Server running on port 3000
[2025-04-11 18:08:23] INFO: connected to mongoDB server ::
[2025-04-11 18:08:35] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:09:25] INFO: Server running on port 3000
[2025-04-11 18:09:25] INFO: connected to mongoDB server ::
[2025-04-11 18:09:27] ERROR: Error in signup: User validation failed: aadharCardNumber: Path `aadharCardNumber` is required.
[2025-04-11 18:12:23] INFO: Server running on port 3000
[2025-04-11 18:12:23] INFO: connected to mongoDB server ::
[2025-04-11 18:12:29] INFO: Server running on port 3000
[2025-04-11 18:12:29] INFO: connected to mongoDB server ::
[2025-04-11 18:12:35] INFO: Server running on port 3000
[2025-04-11 18:12:35] INFO: connected to mongoDB server ::
[2025-04-11 18:12:41] ERROR: Error in signup: Spread syntax requires ...iterable[Symbol.iterator] to be a function
[2025-04-11 18:12:57] INFO: Server running on port 3000
[2025-04-11 18:12:57] INFO: connected to mongoDB server ::
[2025-04-11 18:12:59] ERROR: Error in signup: First argument to `Model` constructor must be an object, **not** a string. Make sure you're calling `mongoose.model()`, not `mongoose.Model()`.
[2025-04-11 18:13:46] INFO: Server running on port 3000
[2025-04-11 18:13:46] INFO: connected to mongoDB server ::
[2025-04-11 18:13:49] INFO: Hashing password...
[2025-04-11 18:15:19] INFO: Server running on port 3000
[2025-04-11 18:15:19] INFO: connected to mongoDB server ::
[2025-04-11 18:15:31] INFO: Hashing password...
[2025-04-11 18:16:21] INFO: Server running on port 3000
[2025-04-11 18:16:21] INFO: connected to mongoDB server ::
[2025-04-11 18:16:28] INFO: Server running on port 3000
[2025-04-11 18:16:28] INFO: connected to mongoDB server ::
[2025-04-14 11:51:13] INFO: Server running on port 3000
[2025-04-14 11:51:13] INFO: connected to mongoDB server ::
[2025-04-14 11:52:49] INFO: Server running on port 3000
[2025-04-14 11:52:49] INFO: connected to mongoDB server ::
[2025-04-14 11:54:08] INFO: Server running on port 3000
[2025-04-14 11:54:08] INFO: connected to mongoDB server ::
[2025-04-14 11:55:03] WARN: Token Not Found or Invalid Format
[2025-04-14 11:56:19] INFO: Server running on port 3000
[2025-04-14 11:56:19] INFO: connected to mongoDB server ::
[2025-04-14 11:56:49] INFO: Password not modified, skipping hashing
[2025-04-14 12:00:07] INFO: Server running on port 3000
[2025-04-14 12:00:07] INFO: connected to mongoDB server ::
[2025-04-14 12:10:31] INFO: Server running on port 3000
[2025-04-14 12:10:31] INFO: connected to mongoDB server ::
[2025-04-14 12:10:55] INFO: Server running on port 3000
[2025-04-14 12:10:55] INFO: connected to mongoDB server ::
[2025-04-14 12:15:02] INFO: Server running on port 3000
[2025-04-14 12:15:02] INFO: connected to mongoDB server ::
[2025-04-14 12:16:00] INFO: Server running on port 3000
[2025-04-14 12:16:00] INFO: connected to mongoDB server ::
[2025-04-14 12:16:12] INFO: Server running on port 3000
[2025-04-14 12:16:12] INFO: connected to mongoDB server ::
[2025-04-14 12:16:53] INFO: Server running on port 3000
[2025-04-14 12:16:53] INFO: connected to mongoDB server ::
[2025-04-14 12:16:58] INFO: candidate
[2025-04-14 12:17:20] INFO: Server running on port 3000
[2025-04-14 12:17:20] INFO: connected to mongoDB server ::
[2025-04-14 12:17:24] INFO: candidate ::
[2025-04-14 12:18:51] INFO: Server running on port 3000
[2025-04-14 12:18:51] INFO: connected to mongoDB server ::
[2025-04-14 12:19:15] INFO: Server running on port 3000
[2025-04-14 12:19:16] INFO: connected to mongoDB server ::
[2025-04-14 12:19:17] INFO: Server running on port 3000
[2025-04-14 12:19:17] INFO: connected to mongoDB server ::
[2025-04-14 12:19:44] INFO: Server running on port 3000
[2025-04-14 12:19:44] INFO: connected to mongoDB server ::
[2025-04-14 14:31:40] INFO: Server running on port 3000
[2025-04-14 14:31:40] INFO: connected to mongoDB server ::
[2025-04-14 14:35:15] INFO: Server running on port 3000
[2025-04-14 14:35:15] INFO: connected to mongoDB server ::
[2025-04-14 14:35:20] INFO: Server running on port 3000
[2025-04-14 14:35:20] INFO: connected to mongoDB server ::
[2025-04-14 14:35:53] INFO: Server running on port 3000
[2025-04-14 14:35:53] INFO: connected to mongoDB server ::
[2025-04-14 14:36:45] INFO: Server running on port 3000
[2025-04-14 14:36:45] INFO: connected to mongoDB server ::
[2025-04-14 14:36:47] ERROR: Error in getAllUsersWithVotes: Parameter "filter" to find() must be an object, got "name votes" (type string)
[2025-04-14 14:37:33] INFO: Server running on port 3000
[2025-04-14 14:37:33] INFO: connected to mongoDB server ::
[2025-04-14 14:37:46] INFO: Server running on port 3000
[2025-04-14 14:37:46] INFO: connected to mongoDB server ::
[2025-04-14 14:38:33] INFO: Server running on port 3000
[2025-04-14 14:38:33] INFO: connected to mongoDB server ::
[2025-04-14 14:48:21] INFO: Server running on port 3000
[2025-04-14 14:48:21] INFO: connected to mongoDB server ::
[2025-04-14 14:48:59] INFO: Server running on port 3000
[2025-04-14 14:48:59] INFO: connected to mongoDB server ::
[2025-04-14 14:50:42] INFO: Server running on port 3000
[2025-04-14 14:50:42] INFO: connected to mongoDB server ::
